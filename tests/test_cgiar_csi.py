# -*- coding: utf-8 -*-
#
# Copyright (c) 2016 Alessandro Amici
#

# python 2 support via python-future
from __future__ import absolute_import, unicode_literals

import os

from elevation import cgiar_csi


def test_srtm3_v41_tile_indices():
    # values from http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp
    assert cgiar_csi.srtm3_tile_ilonlat(-177.5, 52.5) == (1, 2)
    assert cgiar_csi.srtm3_tile_ilonlat(177.5, -47.5) == (72, 22)
    assert cgiar_csi.srtm3_tile_ilonlat(10.1, 44.9) == (39, 4)
    assert cgiar_csi.srtm3_tile_ilonlat(14.9, 44.9) == (39, 4)
    assert cgiar_csi.srtm3_tile_ilonlat(10.1, 40.1) == (39, 4)
    assert cgiar_csi.srtm3_tile_ilonlat(14.9, 40.1) == (39, 4)


def test_srtm3_tile_local_path():
    assert cgiar_csi.srtm3_tile_local_path(39, 4).endswith('srtm_39_04.tif')


def test_srtm3_tile_remote_url():
    # values from http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp
    expected = 'http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_V41/SRTM_Data_GeoTiff/srtm_39_04.zip'
    assert cgiar_csi.srtm3_tile_remote_url(39, 4) == expected


zip_bytes = (
    b"PK\x03\x04\x14\x00\x00\x00\x08\x00\xa6\xa4rH\xc8\xb5\x8d\xeb\xe9\x01\x00\x00p\x04"
    b"\x00\x00\t\x00\x1c\x00int16.tifUT\t\x00\x03\xe8X\xecV\x02Y\xecVux\x0b\x00\x01\x04\xf5\x01\x00"
    b"\x00\x04\x14\x00\x00\x00}S=k\x1c1\x10\x9d\xbd\xdb\x18\x17\x87\x13\x83\xbf0)\x16\xd2$n\x82"
    b"\xd3\xb8\xf5\x81\x1b\x1b\xfb\x9a\xd8\x04\xb6\x15\x06\xc3BR\xa8\x8bR%\x82kTn\xb9\xa4\xbbr"
    b"\t.\\^\xe9.\xf8G\xb8\xf0_\x08\xa4\x89GOo\xd7\x9b\xc6+F3\x9a\x19\xcd<=i\x8f\x8f\xf7\xe4"
    b"\xedX\xa4\x12'^\xac\x8a\x97\x80\xd9\xab/\x89G\xd4J#52\xe2*Z\x0b\x95\x80\x95\x13\xa3~\xc7}F3-\xeb8"
    b"\xe6\x04x\x1c\xebY\x1d\x15\xa4\x86\xd7\xb1s\xd4Ib\xb4\xc6\x1c\x18kzd\x16#bp\x8a\xc1\x01Q\x85"
    b"\x0c'Kiu\xd4\xc0W\xb3\x9fE\xcc\xf4]\xee\xd4{\x8b\xac\x80\x8a\xa6\xc7\xe9\xfb\x95\xd7\xb8c"
    b"\x8d\xaeV .O\xf4\x06\xe7\xbeQ\xa9X\xdb\x0eXt\xb0\r\xf3\xba3\xc7\x8e\x06b\x89\xaeb5G~:\x16S\rCo"
    b"\xcd\x1d\x01\xb8\x12\xe7C\x1d\xc8\xa2\x95RW-\x18\x89\xa3;[\x8b\n\xdd\x9e\x88x\x89\xac"
    b"\x84\xca\xe0\x8eZ\x9d\xeb\xfe\xbe\r\xb1{D\x13\x03\xa9Z\xe2-\xf6,\x89\xbe$\xbb\xe9^:\xc6b"
    b"\xf6Bu\x83\xae\x15o3U5=\x93%v.\xd1=\xe0My\xd4\xb3\x98\r\xcf`\xf8r\x1a\xe5;q\xe0\xc9\xc8\t\x19"
    b"\x0ex!\x0b2\xdc\xca\x1f\xf9\xa77\xed\xc9M\x8d\xd8\x02\xd8;\x9e\xa3\xdc\xe8h\x80\xb1Am\xdf"
    b"\xbf\xf1\xaa\xc7\x1c{\xbf\x14\xc9\xc6\x92\x89\xc8\x86J6\xb0G\xb4_\xa9\x8ciGY\x19\xd8\xebY"
    b"\x0e\xbd\xaa\xb29\xf0o\r\xeal3\xa7\xd0\xbf\xf1\xf5 \xe7#\xed\x91\xca\xda\x8f\x89hX\xeeu"
    b"\xfa\xee'\xb2\xa2\xf6_\xb5\x7f\xcd\xc7\xb2\xa3\xf6^.r=\x1f\xc9\x96\xda\xa5\xdaO\xdf\xec"
    b"\xf0\x7f\xfd\xfcw\xf8\xb0;\x8d\xfa\xf7\xcf\xd3i\xe7\xcb\x80\xe2\x85H\x9e\xec\x8cz\x94_"
    b"\xcf7c\xc2$\xae?]\xe5\xd0\xef\xde\xcc\xa6G\x1f\x0e\x8a\xf7\xc5\xc5\xf9Y\xf1\xf5\xcb\xe7"
    b"\xcbb\x7f\x7f\xf6M\x1e\x01PK\x01\x02\x1e\x03\x14\x00\x00\x00\x08\x00\xa6\xa4rH\xc8\xb5"
    b"\x8d\xeb\xe9\x01\x00\x00p\x04\x00\x00\t\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00"
    b"\x00\xa4\x81\x00\x00\x00\x00int16.tifUT\x05\x00\x03\xe8X\xecVux\x0b\x00\x01\x04\xf5\x01\x00\x00"
    b"\x04\x14\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00O\x00\x00\x00,\x02\x00"
    b"\x00\x00\x00"
)


def test_srtm3_unpack_tile(tmpdir):
    zip = tmpdir.join('int16.zip')
    tif = tmpdir.join('int16.tif')

    zip.write_binary(zip_bytes)

    cgiar_csi.srtm3_unpack_tile(str(zip), str(tif))
    assert len(tif.read_binary()) == 1136


def notest_srtm3_fetch_tile():
    here = os.path.dirname(__file__)
    cgiar_csi.srtm3_fetch_tile(39, 4, os.path.join(here, 'srtm_39_04.tif'))


def test_srtm3_ensure_datasource():
    assert cgiar_csi.srtm3_ensure_datasource(9.1, 39.1, 14.9, 44.9)


def test_srtm3_clip():
    cgiar_csi.srtm3_clip(13.1, 43.1, 14.9, 44.9, 'out.tif') == 0
